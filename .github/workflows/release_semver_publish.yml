name: Publish SemVer Build
on:
  workflow_call:
    secrets:
      PYPI_TOKEN:
        required: true
    inputs:
      branch:
        description: 'The branch to checkout'
        type: string
        default: master
      action_branch:
        description: 'The shared action branch to checkout'
        type: string
        default: main
      python_version:
        description: "Python version to use for the build process."
        type: string
        default: "3.8"
      changelog_file:
        description: "File to write the changelog to."
        type: string
        default: CHANGELOG.md
      subject:
        description: 'Subject title of the push/pull-request event to parse the release type.'
        type: string
        required: true

jobs:
  build_and_publish:
    env:
      PCCC_CONFIG_FILE: ${{ github.workspace }}/action/github/pccc.toml
      GIT_CLIFF_CONFIG: ${{ github.workspace }}/action/github/cliff.toml
      GIT_CLIFF_WORKDIR: ${{ github.workspace }}/action/package/
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      GITHUB_REPO: ${{ github.repository }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
          path: action/package/
      - name: Checkout Scripts Repo
        uses: actions/checkout@v4
        with:
          repository: OpenVoiceOS/.github
          ref: ${{ inputs.action_branch }}
          path: action/github/
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{inputs.python_version}}
      - name: Install Python Dependencies
        run: |
          pip install -r ${{ github.workspace }}/action/github/requirements/pip_base.txt
          pip install -r ${{ github.workspace }}/action/github/requirements/pip_build_tools.txt
      - name: Get Release Version
        run: |
          RELEASE_VERSION=$(python ${{ github.workspace }}/action/package/setup.py --version)
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
      - name: Parse Release Type
        run: |
          RELEASE_TYPE=$(python ${{ github.workspace }}/action/github/scripts/parse_semver_release.py)
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_ENV
          RELEASE_CYCLE_START=$(python ${{ github.workspace }}/action/github/scripts/semver_release_version.py --latest --type "$RELEASE_TYPE" )
          echo "RELEASE_CYCLE_START=${RELEASE_CYCLE_START}" >> $GITHUB_ENV
      - name: Create Release Changelog
        id: release_changelog
        run: |
          cd ${{ github.workspace }}/action/package/
          python ${{ github.workspace }}/action/github/scripts/changelog_postprocess.py --since ${{ env.RELEASE_CYCLE_START }}
        env:
          GIT_CLIFF_TAG: ${{ env.RELEASE_VERSION }}
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GH_PAT }}
          tag: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          body: |
            Changes in this Release
            ${{ steps.release_changelog.outputs.changelog }}
      - name: Build Distribution Packages
        run: |
          mkdir -p ${{ github.workspace }}/action/dist
          cd ${{ github.workspace }}/action/package/
          python setup.py sdist bdist_wheel --dist-dir ${{ github.workspace }}/action/dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{secrets.PYPI_TOKEN}}
          packages-dir: action/dist/
      # set cached test status to complete
      - name: Set test status
        run: |
          echo "complete" > test-status
      - name: Delete Test Tracking Cache
        run: |
          gh extension install actions/gh-actions-cache

          echo "Fetching list of cache key"
          cacheKeys=$(gh actions-cache list -R ${{ github.repository }} -L 100 | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeys
          do
              gh actions-cache delete $cacheKey -R ${{ github.repository }} --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
      - name: Cache test status
        uses: actions/cache@v2
        with:
          path: test-status
          key: test-status-${{ runner.os }}
